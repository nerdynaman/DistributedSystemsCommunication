syntax = "proto3";

package market;

// Define the messages for communication between seller client and market server
message RegisterSellerRequest {
    string address = 1;
    string uuid = 2;
}

message SellItemRequest {
    string address = 1;
    string uuid = 2;
    string product_name = 3;
    string category = 4;
    int64 quantity = 5;
    string description = 6;
    float price_per_unit = 7;
}

message UpdateItemRequest {
    string address = 1;
    string uuid = 2;
    string item_id = 3;
    float new_price = 4;
    int64 new_quantity = 5;
}

// Define the messages for communication between buyer client and market server
message BuyItemRequest {
    string item_id = 1;
    int32 quantity = 2;
    string buyer_address = 3;
}

message DeleteItemRequest{
    string item_id = 1;
    string seller_uuid = 2;
    string address = 3;
}

message DisplaySellerItemsRequest{
    string seller_uuid = 1;
    string address = 2;
}

message DisplaySellerItemsResponse {
    enum Status {
        SUCCESS = 0;
        FAILED = 1;
    }

    string items = 2;
    Status status = 1;
}


message DeleteItemResponse{
    enum Status{
        SUCCESS = 0;
        FAILED = 1;
        INVALID = -1;
    }
    Status status = 1;
}

message AddToWishlistRequest {
    string item_id = 1;
    string buyer_address = 2;
}

message RateItemRequest {
    string item_id = 1;
    string buyer_address = 2;
    int32 rating = 3;
}

message SearchItemRequest {
    string item_name = 1;
    string category = 2;
}

// Define the responses for all actions
message RegisterSellerResponse {
    enum Status {
        SUCCESS = 0;
        FAILED = 1;
    }
    Status status = 1;
    string uuid = 2;
}

message SellItemResponse {
    enum Status {
        SUCCESS = 0;
        FAILED = 1;
    }
    Status status = 1;
    string item_id = 2;
}

message UpdateItemResponse {
    enum Status {
        SUCCESS = 0;
        FAILED = 1;
        ITEM_NOT_FOUND = -1;
        UNAUTHORIZED = -2;
    }
    Status status = 1;
    string item_id = 2;
}

message BuyItemResponse {
    enum Status {
        SUCCESS = 0;
        ITEM_NOT_AVAILABLE = 1;
        FAILED = -1;
    }
    Status status = 1;
}

message AddToWishlistResponse {
    enum Status {
        SUCCESS = 0;
        ITEM_NOT_AVAILABLE = 1;
    }
    Status status = 1;
}

message RateItemResponse {
    enum Status {
        SUCCESS = 0;
        UNAUTHORIZED = 1;
        ITEM_NOT_FOUND = 2;
    }
    Status status = 1;
}

message SearchItemResponse {
    message ItemInfo {
        string item_id = 1;
        string product_name = 2;
        string category = 3;
        int32 quantity = 4;
        string description = 5;
        float price_per_unit = 6;
        string seller_address = 7;
        int32 rating = 8;
    }
    repeated ItemInfo items = 1;
}

// Define the service for market server
service Market {
    rpc RegisterSeller(RegisterSellerRequest) returns (RegisterSellerResponse);
    rpc SellItem(SellItemRequest) returns (SellItemResponse);
    rpc BuyItem(BuyItemRequest) returns (BuyItemResponse);
    rpc AddToWishlist(AddToWishlistRequest) returns (AddToWishlistResponse);
    rpc RateItem(RateItemRequest) returns (RateItemResponse);
    rpc SearchItem(SearchItemRequest) returns (SearchItemResponse);
    rpc UpdateItem(UpdateItemRequest) returns (UpdateItemResponse);
    rpc DisplaySellerItems(DisplaySellerItemsRequest) returns (DisplaySellerItemsResponse);
    rpc DeleteItem(DeleteItemRequest) returns (DeleteItemResponse);
}